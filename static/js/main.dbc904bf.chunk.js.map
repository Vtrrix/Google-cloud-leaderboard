{"version":3,"sources":["assets/logo.png","components/NavBar.js","components/Profile.js","components/LeaderBoard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","NavBar","CssBaseline","AppBar","style","background","Toolbar","Typography","variant","src","Logo","className","alt","useStyles","makeStyles","theme","root","maxWidth","avatar","backgroundColor","blue","Profile","student","classes","Card","key","id","CardHeader","Avatar","aria-label","dp","title","name","subheader","quests_status","width","opacity","CardContent","color","component","qwiklabs_id","List","height","overflowY","quests","map","ele","ListItem","LeaderBoard","state","values","fetch","then","response","status","json","data","setState","Array","from","console","log","catch","err","Container","Box","my","Grid","container","justify","spacing","this","item","xs","Component","Main","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dbc904bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.98aa612b.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  CssBaseline,\n  useScrollTrigger,\n} from \"@material-ui/core\";\nimport Logo from \"../assets/logo.png\";\n\nfunction ElevationScroll(props) {\n  const { children, window } = props;\n\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    target: window ? window() : undefined,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nElevationScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n\n  window: PropTypes.func,\n};\n\nexport default function NavBar(props) {\n  return (\n    <>\n      <CssBaseline />\n      <ElevationScroll {...props}>\n        <AppBar style={{ background: \"#fafafa\" }}>\n          <Toolbar>\n            <Typography variant=\"h6\">\n              <img src={Logo} className=\"logo\" alt=\"Google\"></img>\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      <Toolbar />\n    </>\n  );\n}\n","import React from \"react\";\nimport { blue } from \"@material-ui/core/colors\";\nimport {\n  List,\n  ListItem,\n  Avatar,\n  CardContent,\n  Typography,\n  CardHeader,\n  Card,\n  makeStyles,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n\n  avatar: {\n    backgroundColor: blue[500],\n  },\n}));\n\nexport default function Profile({ student }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} key={student.id}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\n            <img src={student.dp} alt=\"G\" />\n          </Avatar>\n        }\n        title={student.name}\n        subheader={student.quests_status}\n      />\n      <hr style={{ width: \"85%\", opacity: \"0.2\" }}></hr>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {student.qwiklabs_id}\n        </Typography>\n        <List style={{ height: \"200px\", overflowY: \"auto\" }}>\n          {student.quests.map((ele) => {\n            return <ListItem>{ele}</ListItem>;\n          })}\n        </List>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Box, Container } from \"@material-ui/core\";\nimport Profile from \"./Profile\";\nimport Grid from \"@material-ui/core/Grid\";\nclass LeaderBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: [],\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://qwiklabs-ranking-dsccu.herokuapp.com/api\")\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n\n        response.json().then((data) => {\n          this.setState({\n            values: Array.from(data),\n          });\n          // console.log(this.state.values)\n        });\n      })\n      .catch((err) => {\n        console.log(\"Fetch Error :-S\", err);\n      });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Box my={2}>\n          <Grid container justify=\"center\" spacing={4}>\n            {this.state.values.map((student) => {\n              return (\n                <Grid item xs={4}>\n                  <Profile student={student} key={student.id} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Container>\n    );\n  }\n}\n\nexport default LeaderBoard;\n","import React, { Component } from \"react\";\nimport NavBar from \"./NavBar\";\nimport LeaderBoard from \"./LeaderBoard\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <>\n        <NavBar />\n        <LeaderBoard />\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}